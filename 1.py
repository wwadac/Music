import logging
import asyncio
import json
import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = "8244258907:AAGSOfk1CMoBku1ChaL-lTEjWdFG7ll_EYo"
ADMIN_IDS = [6893832048]
PUBLIC_MODE = True
CONFIG_FILE = "user_configs.json"

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
class UserConfig:
    def __init__(self):
        self.source_chat_id = None
        self.backup_chat_id = None
        self.is_active = False
        self.forward_mode = "forward"
        self.content_types = {
            "text": True,
            "photo": True,
            "video": True,
            "document": True,
            "audio": True,
            "voice": True,
            "sticker": True,
            "poll": True,
            "location": True
        }

    def to_dict(self):
        return {
            "source_chat_id": self.source_chat_id,
            "backup_chat_id": self.backup_chat_id,
            "is_active": self.is_active,
            "forward_mode": self.forward_mode,
            "content_types": self.content_types
        }

    @classmethod
    def from_dict(cls, data):
        config = cls()
        config.source_chat_id = data.get("source_chat_id")
        config.backup_chat_id = data.get("backup_chat_id")
        config.is_active = data.get("is_active", False)
        config.forward_mode = data.get("forward_mode", "forward")
        config.content_types = data.get("content_types", {
            "text": True, "photo": True, "video": True, "document": True,
            "audio": True, "voice": True, "sticker": True, "poll": True, "location": True
        })
        return config

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤
user_configs = {}

# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
def save_configs():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        config_data = {}
        for user_id, config in user_configs.items():
            config_data[str(user_id)] = config.to_dict()

        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config_data, f, ensure_ascii=False, indent=2)
        logging.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")

def load_configs():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    global user_configs
    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                config_data = json.load(f)

            user_configs = {}
            for user_id_str, config_dict in config_data.items():
                user_id = int(user_id_str)
                user_configs[user_id] = UserConfig.from_dict(config_dict)
            logging.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        else:
            user_configs = {}
            logging.info("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")
        user_configs = {}

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# === –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ ===
def check_access(user_id: int) -> bool:
    return PUBLIC_MODE or user_id in ADMIN_IDS

async def is_admin(bot, user_id, chat_id) -> bool:
    try:
        chat_member = await bot.get_chat_member(chat_id, user_id)
        return chat_member.status in ["administrator", "creator"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
        return False

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def get_main_keyboard(user_id: int) -> InlineKeyboardMarkup:
    config = user_configs.get(user_id, UserConfig())
    buttons = [
        [
            InlineKeyboardButton("üìå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª", callback_data="set_source"),
            InlineKeyboardButton("üìå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª", callback_data="set_backup")
        ],
        [
            InlineKeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", callback_data="content_settings"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏", callback_data="forward_settings")
        ],
        [
            InlineKeyboardButton("üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if not config.is_active else "üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
                               callback_data="toggle_status")
        ]
    ]

    if user_id in ADMIN_IDS:
        buttons.append([
            InlineKeyboardButton("üåê –†–µ–∂–∏–º: " + ("–ü—É–±–ª–∏—á–Ω—ã–π" if PUBLIC_MODE else "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π"),
                               callback_data="change_mode")
        ])

    return InlineKeyboardMarkup(buttons)

def get_content_settings_keyboard(user_id: int) -> InlineKeyboardMarkup:
    config = user_configs.get(user_id, UserConfig())
    buttons = []
    content_types = list(config.content_types.keys())

    for i in range(0, len(content_types), 2):
        row = []
        for j in range(i, min(i+2, len(content_types))):
            content_type = content_types[j]
            enabled = config.content_types[content_type]
            row.append(InlineKeyboardButton(
                f"{'‚úÖ' if enabled else '‚ùå'} {content_type.capitalize()}",
                callback_data=f"toggle_{content_type}"
            ))
        buttons.append(row)

    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(buttons)

def get_forward_settings_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Forward", callback_data="set_forward")],
        [InlineKeyboardButton("Copy", callback_data="set_copy")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if not check_access(user_id):
        await update.message.reply_text("‚õî –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    if user_id not in user_configs:
        user_configs[user_id] = UserConfig()

    config = user_configs[user_id]
    mode_status = "üåê –†–µ–∂–∏–º: " + ("–ü—É–±–ª–∏—á–Ω—ã–π" if PUBLIC_MODE else "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π")

    text = (
        "üëÄ <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º</b>\n\n"
        f"{mode_status}\n"
        f"üîπ –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if config.is_active else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'}\n"
        f"üîπ –†–µ–∂–∏–º: {'Forward' if config.forward_mode == 'forward' else 'Copy'}\n"
        f"üîπ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {config.source_chat_id or '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        f"üîπ –†–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª: {config.backup_chat_id or '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n"
        "üÜò –ü–æ–º–æ—â—å: /help"
    )

    await update.message.reply_text(text, parse_mode="HTML", reply_markup=get_main_keyboard(user_id))

async def set_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        return

    global PUBLIC_MODE
    PUBLIC_MODE = not PUBLIC_MODE

    mode = "–û–ë–©–ï–î–û–°–¢–£–ü–ù–´–ô" if PUBLIC_MODE else "–ü–†–ò–í–ê–¢–ù–´–ô"
    await update.message.reply_text(f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mode}")
    await start(update, context)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    if not check_access(user_id):
        await query.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    if user_id not in user_configs:
        user_configs[user_id] = UserConfig()

    config = user_configs[user_id]
    await query.answer()
    data = query.data

    if data == "toggle_status":
        config.is_active = not config.is_active
        save_configs()
        await admin(update, context)

    elif data == "content_settings":
        await query.edit_message_text("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", reply_markup=get_content_settings_keyboard(user_id))

    elif data == "forward_settings":
        await query.edit_message_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:", reply_markup=get_forward_settings_keyboard())

    elif data.startswith("toggle_"):
        content_type = data[7:]
        if content_type in config.content_types:
            config.content_types[content_type] = not config.content_types[content_type]
            save_configs()
            await query.edit_message_text("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", reply_markup=get_content_settings_keyboard(user_id))

    elif data == "set_forward":
        config.forward_mode = "forward"
        save_configs()
        await query.edit_message_text("‚úÖ –†–µ–∂–∏–º –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: Forward")
        await asyncio.sleep(1)
        await query.edit_message_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:", reply_markup=get_forward_settings_keyboard())

    elif data == "set_copy":
        config.forward_mode = "copy"
        save_configs()
        await query.edit_message_text("‚úÖ –†–µ–∂–∏–º –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: Copy")
        await asyncio.sleep(1)
        await query.edit_message_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:", reply_markup=get_forward_settings_keyboard())

    elif data in ["set_source", "set_backup"]:
        await query.edit_message_text(f"üì• –í–≤–µ–¥–∏—Ç–µ ID {'–æ—Å–Ω–æ–≤–Ω–æ–≥–æ' if data == 'set_source' else '—Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ'} –∫–∞–Ω–∞–ª–∞:")
        context.user_data['action'] = data

    elif data == "change_mode":
        global PUBLIC_MODE
        PUBLIC_MODE = not PUBLIC_MODE
        mode = "–ü—É–±–ª–∏—á–Ω—ã–π" if PUBLIC_MODE else "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π"
        await query.answer(f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mode}", show_alert=True)
        await admin(update, context)

    elif data == "back_to_main":
        await admin(update, context)

async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id if update.effective_user else update.callback_query.from_user.id
    config = user_configs.get(user_id, UserConfig())
    mode_status = "üåê –†–µ–∂–∏–º: " + ("–ü—É–±–ª–∏—á–Ω—ã–π" if PUBLIC_MODE else "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π")

    text = (
        "üëÄÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º</b>\n\n"
        f"{mode_status}\n"
        f"üîπ –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if config.is_active else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'}\n"
        f"üîπ –†–µ–∂–∏–º: {'Forward' if config.forward_mode == 'forward' else 'Copy'}\n"
        f"üîπ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {config.source_chat_id or '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        f"üîπ –†–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª: {config.backup_chat_id or '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"
    )

    if update.callback_query:
        await update.callback_query.edit_message_text(text, parse_mode="HTML", reply_markup=get_main_keyboard(user_id))
    elif update.message:
        await update.message.reply_text(text, parse_mode="HTML", reply_markup=get_main_keyboard(user_id))

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if not check_access(user_id):
        await update.message.reply_text("‚õî –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    if user_id not in user_configs:
        user_configs[user_id] = UserConfig()

    config = user_configs[user_id]

    if 'action' not in context.user_data:
        return

    text = update.message.text.strip()
    action = context.user_data['action']

    try:
        if action in ['set_source', 'set_backup']:
            if text.startswith('https://t.me/'):
                username = text.split('/')[-1]
                chat = await update.get_bot().get_chat(f"@{username}")
                chat_id = chat.id
            else:
                chat_id = int(text)

            if not await is_admin(update.get_bot(), user_id, chat_id):
                await update.message.reply_text("‚ùå –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞!")
                return

            if action == 'set_source':
                config.source_chat_id = chat_id
                await update.message.reply_text(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {chat_id}")
            else:
                config.backup_chat_id = chat_id
                await update.message.reply_text(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {chat_id}")

            save_configs()
            del context.user_data['action']
            await admin(update, context)

    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –≤–∏–¥–∞ https://t.me/username")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å—Ç–æ–≤ ===
async def channel_post_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.channel_post:
        return

    post = update.channel_post

    for user_id, config in user_configs.items():
        if config.is_active and post.chat.id == config.source_chat_id and config.backup_chat_id:
            content_type = None
            if post.text and config.content_types["text"]:
                content_type = "text"
            elif post.photo and config.content_types["photo"]:
                content_type = "photo"
            elif post.video and config.content_types["video"]:
                content_type = "video"
            elif post.document and config.content_types["document"]:
                content_type = "document"
            elif post.audio and config.content_types["audio"]:
                content_type = "audio"
            elif post.voice and config.content_types["voice"]:
                content_type = "voice"
            elif post.sticker and config.content_types["sticker"]:
                content_type = "sticker"
            elif post.poll and config.content_types["poll"]:
                content_type = "poll"
            elif post.location and config.content_types["location"]:
                content_type = "location"

            if not content_type:
                continue

            try:
                if config.forward_mode == "forward":
                    await post.forward(config.backup_chat_id)
                else:
                    await context.bot.copy_message(
                        chat_id=config.backup_chat_id,
                        from_chat_id=post.chat.id,
                        message_id=post.message_id
                    )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ===
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=True)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìå <b>–ë–æ—Ç –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤</b>

‚ö° <b>–ß—Ç–æ –¥–µ–ª–∞–µ—Ç:</b>
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π

üõ† <b>–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:</b>
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –æ–±–∞ –∫–∞–Ω–∞–ª–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∞
2. –£–∫–∞–∂–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª—ã
3. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
4. –í–∫–ª—é—á–∏—Ç–µ –±–æ—Ç–∞ –∫–Ω–æ–ø–∫–æ–π "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"

üîß <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é
/help - —ç—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞

‚ö† <b>–í–∞–∂–Ω–æ:</b>
‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –≤ –æ–±–æ–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –∫–∞–∫ —Å—Å—ã–ª–∫–æ–π, —Ç–∞–∫ –∏ –∫–æ–ø–∏–µ–π
"""
    await update.message.reply_text(help_text, parse_mode="HTML")

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    load_configs()

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("mode", set_mode))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE & ~filters.COMMAND, message_handler))
    app.add_handler(MessageHandler(filters.UpdateType.CHANNEL_POST, channel_post_handler))
    app.add_error_handler(error_handler)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
