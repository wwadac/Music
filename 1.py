import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ContextTypes,
)
from datetime import datetime

# ---------- –ù–ê–°–¢–†–û–ô–ö–ò ----------
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

MAX_FILE_SIZE = 100 * 1024 * 1024  # 100 MB
ALLOWED_EXTENSIONS = ['.py', '.txt', '.json', '.mcpack', '.mcaddon', '.png', '.jpg', '.jpeg']
SUBSCRIPTION_PRICE = 299  # —Ä—É–±.
ADMIN_IDS = [6893832048]   # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π TG-ID
FILES_PER_PAGE = 5

# ---------- –°–û–°–¢–û–Ø–ù–ò–Ø ----------
WAITING_FOR_FILE, WAITING_FOR_NAME, WAITING_FOR_EXTENSION, WAITING_FOR_SEARCH = range(4)

# ---------- –•–†–ê–ù–ò–õ–ò–©–ê ----------
user_files = {}
subscribed_users = set()
file_search_cache = {}

# ---------- –£–¢–ò–õ–ò–¢–´ ----------
async def get_file_size(bot, file_id: str) -> int:
    try:
        file = await bot.get_file(file_id)
        return file.file_size or 0
    except Exception:
        return 0

# ---------- –û–ë–©–ò–ï –§–£–ù–ö–¶–ò–ò ----------
def user_id_from_update(update: Update) -> int:
    if update.callback_query:
        return update.callback_query.from_user.id
    return update.effective_user.id

# ---------- –ö–û–ú–ê–ù–î–´ ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    welcome = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "üìÅ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª –∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ.\n"
        "üîπ –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è/—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ\n"
        "üîπ –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞ 299‚ÇΩ ‚Äî –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º\n\n"
        "üìè –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: 100 –ú–ë\nüìå –†–∞–∑—Ä–µ—à–µ–Ω—ã:\n"
    ) + "\n".join(f"‚Ä¢ {e}" for e in ALLOWED_EXTENSIONS)

    kb = [
        [InlineKeyboardButton("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="cmd_subscribe")],
        [InlineKeyboardButton("üîê –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å", callback_data="cmd_privacy")],
        [InlineKeyboardButton("üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤", callback_data="cmd_browse")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="cmd_search")],
    ]
    await update.message.reply_text(welcome, reply_markup=InlineKeyboardMarkup(kb), parse_mode='HTML')
    context.user_data['state'] = WAITING_FOR_FILE

async def subscription_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = user_id_from_update(update)
    txt = (
        "‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —Å–∫–∞—á–∏–≤–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤ –±–æ—Ç–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "/browse - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤\n"
        "/search - –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤\n"
        "/privacy - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"
    ) if user_id in subscribed_users else (
        "üîí –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞\n\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 299 —Ä—É–±./–º–µ—Å—è—Ü\n\n"
        "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–π–ª–∞–º\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤\n\n"
        "–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @admin"
    )
    if update.callback_query:
        await update.callback_query.message.reply_text(txt)
    else:
        await update.message.reply_text(txt)

async def toggle_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = user_id_from_update(update)
    files = user_files.get(user_id, [])
    if not files:
        txt = "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."
        if update.callback_query:
            await update.callback_query.message.reply_text(txt)
        else:
            await update.message.reply_text(txt)
        return

    kb = [
        [InlineKeyboardButton("üîì –°–¥–µ–ª–∞—Ç—å –≤—Å–µ –ø—É–±–ª–∏—á–Ω—ã–º–∏", callback_data="set_all_public")],
        [InlineKeyboardButton("üîí –°–¥–µ–ª–∞—Ç—å –≤—Å–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏", callback_data="set_all_private")],
        [InlineKeyboardButton("üìã –£–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏", callback_data="manage_individual")],
    ]
    txt = "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤:\n\n‚Ä¢ –ü—É–±–ª–∏—á–Ω—ã–µ ‚Äî –≤–∏–¥–Ω—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º\n‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ ‚Äî —Ç–æ–ª—å–∫–æ –≤–∞–º"
    if update.callback_query:
        await update.callback_query.message.reply_text(txt, reply_markup=InlineKeyboardMarkup(kb))
    else:
        await update.message.reply_text(txt, reply_markup=InlineKeyboardMarkup(kb))

async def search_files(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = user_id_from_update(update)
    if user_id not in subscribed_users:
        txt = "üîí –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º."
        if update.callback_query:
            await update.callback_query.message.reply_text(txt)
        else:
            await update.message.reply_text(txt)
        return
    txt = "üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–∏–º—è –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ):"
    if update.callback_query:
        await update.callback_query.message.reply_text(txt)
    else:
        await update.message.reply_text(txt)
    context.user_data['state'] = WAITING_FOR_SEARCH

async def browse_files(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = user_id_from_update(update)
    if user_id not in subscribed_users:
        txt = "üîí –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º."
        if update.callback_query:
            await update.callback_query.message.reply_text(txt)
        else:
            await update.message.reply_text(txt)
        return

    public_files = [f for uid, files in user_files.items()
                    if uid != user_id for f in files if f.get('public', True)]
    if not public_files:
        txt = "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –ø—É–±–ª–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."
        if update.callback_query:
            await update.callback_query.message.reply_text(txt)
        else:
            await update.message.reply_text(txt)
        return

    file_search_cache[user_id] = [public_files, 0]
    await show_files_page(update, context, user_id, 0)

async def show_files_page(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, page: int) -> None:
    if user_id not in file_search_cache:
        if update.callback_query:
            await update.callback_query.message.reply_text("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å—Ç–∞—Ä–µ–ª–∏.")
        else:
            await update.message.reply_text("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å—Ç–∞—Ä–µ–ª–∏.")
        return

    files, _ = file_search_cache[user_id]
    total = (len(files) + FILES_PER_PAGE - 1) // FILES_PER_PAGE
    page = max(0, min(page, total - 1))
    start, end = page * FILES_PER_PAGE, min((page + 1) * FILES_PER_PAGE, len(files))

    msg = f"üìÇ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}  |  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total}\n\n"
    kb = []
    for i in range(start, end):
        f = files[i]
        size = await get_file_size(context.bot, f['file_id'])
        size_str = f"{size / 1024 / 1024:.1f}MB" if size > 1024 * 1024 else f"{size / 1024:.1f}KB"
        msg += f"üìÑ {f['filename']} ({size_str})\n"
        kb.append([InlineKeyboardButton(f"‚¨áÔ∏è {f['filename']}", callback_data=f"download_{i}")])

    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page - 1}"))
    if page < total - 1:
        nav.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", callback_data=f"page_{page + 1}"))
    if nav:
        kb.append(nav)
    kb.append([InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")])

    reply_markup = InlineKeyboardMarkup(kb)
    if update.callback_query:
        await update.callback_query.edit_message_text(msg, reply_markup=reply_markup)
    else:
        await update.message.reply_text(msg, reply_markup=reply_markup)

async def download_file(update: Update, context: ContextTypes.DEFAULT_TYPE, idx: int) -> None:
    user_id = update.callback_query.from_user.id
    if user_id not in file_search_cache:
        await update.callback_query.answer("‚ùå –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    files, _ = file_search_cache[user_id]
    if not (0 <= idx < len(files)):
        await update.callback_query.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    f = files[idx]
    try:
        await update.callback_query.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º...")
        tg_file = await context.bot.get_file(f['file_id'])
        path = await tg_file.download_to_drive()
        with open(path, 'rb') as fp:
            await context.bot.send_document(
                chat_id=update.callback_query.message.chat_id,
                document=fp,
                filename=f['filename'],
                caption=f"‚úÖ {f['filename']}"
            )
        os.remove(path)
    except Exception as e:
        logger.error(e)
        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –î–û–ö–£–ú–ï–ù–¢–û–í ----------
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.user_data.get('state') != WAITING_FOR_FILE:
        return
    doc = update.message.document
    if doc.file_size > MAX_FILE_SIZE:
        await update.message.reply_text("‚ö†Ô∏è –§–∞–π–ª > 100 –ú–ë.")
        return

    context.user_data.update({
        'file_id': doc.file_id,
        'original_filename': doc.file_name,
        'original_extension': os.path.splitext(doc.file_name)[1],
        'new_extension': os.path.splitext(doc.file_name)[1]
    })

    kb = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="change_name")],
        [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ", callback_data="change_ext")],
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="keep_as_is")],
    ]
    await update.message.reply_text(
        f"üìÑ <b>{doc.file_name}</b>  |  {doc.file_size / 1024 / 1024:.2f} –ú–ë\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(kb),
        parse_mode='HTML'
    )

# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ----------
async def handle_filename(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.user_data.get('state') != WAITING_FOR_NAME:
        return
    name = update.message.text.strip()
    if not name:
        await update.message.reply_text("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    context.user_data['new_name'] = name
    ext = context.user_data['new_extension']
    kb = [
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_save")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="change_name")],
        [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ", callback_data="change_ext")],
    ]
    await update.message.reply_text(
        f"üìÑ –ù–æ–≤–æ–µ –∏–º—è: <b>{name}{ext}</b>",
        reply_markup=InlineKeyboardMarkup(kb),
        parse_mode='HTML'
    )

async def handle_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.user_data.get('state') != WAITING_FOR_SEARCH:
        return
    query = update.message.text.strip().lower()
    user_id = update.effective_user.id
    if not query:
        await update.message.reply_text("‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å")
        context.user_data['state'] = WAITING_FOR_FILE
        return

    found = [f for uid, files in user_files.items() if uid != user_id
             for f in files if f.get('public', True) and query in f['filename'].lower()]
    if not found:
        await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        context.user_data['state'] = WAITING_FOR_FILE
        return

    file_search_cache[user_id] = [found, 0]
    await show_files_page(update, context, user_id, 0)

# ---------- –°–û–•–†–ê–ù–ï–ù–ò–ï ----------
async def process_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    try:
        file_id = context.user_data['file_id']
        new_name = context.user_data.get('new_name', os.path.splitext(context.user_data['original_filename'])[0])
        new_ext = context.user_data.get('new_extension', context.user_data['original_extension'])
        new_filename = f"{new_name}{new_ext}"

        file = await context.bot.get_file(file_id)
        path = await file.download_to_drive()
        new_path = os.path.join(os.path.dirname(path), new_filename)
        os.rename(path, new_path)

        with open(new_path, 'rb') as fp:
            await context.bot.send_document(
                chat_id=query.message.chat_id,
                document=fp,
                filename=new_filename,
                caption=f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {new_filename}",
                parse_mode='HTML'
            )

        user_files.setdefault(user_id, []).append({
            "file_id": file_id,
            "filename": new_filename,
            "public": True,
            "timestamp": datetime.now()
        })
        os.remove(new_path)
        context.user_data.clear()
        context.user_data['state'] = WAITING_FOR_FILE
        await query.delete_message()
    except Exception as e:
        logger.error(e)
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")

# ---------- –ê–î–ú–ò–ù ----------
async def admin_add_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_subscription <user_id>")
        return
    try:
        target = int(context.args[0])
        subscribed_users.add(target)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID")

# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ----------
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è / —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    if data.startswith("download_"):
        await download_file(update, context, int(data[9:]))
    elif data.startswith("page_"):
        page = int(data[5:])
        file_search_cache[user_id][1] = page
        await show_files_page(update, context, user_id, page)
    elif data == "new_search":
        await search_files(query, context)

    # –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–º
    elif data == "change_name":
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è):")
        context.user_data['state'] = WAITING_FOR_NAME
    elif data == "change_ext":
        kb = [[InlineKeyboardButton(ext, callback_data=f"set_ext{ext}")] for ext in ALLOWED_EXTENSIONS]
        kb.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        await query.edit_message_text("üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ:", reply_markup=InlineKeyboardMarkup(kb))
    elif data.startswith("set_ext"):
        context.user_data['new_extension'] = data[7:]
        name = context.user_data.get('new_name', os.path.splitext(context.user_data['original_filename'])[0])
        kb = [
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="change_name")],
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ", callback_data="change_ext")],
            [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_save")],
        ]
        await query.edit_message_text(
            f"üìÑ –ù–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: <b>{name}{data[7:]}</b>",
            reply_markup=InlineKeyboardMarkup(kb),
            parse_mode='HTML'
        )
    elif data in ["keep_as_is", "confirm_save"]:
        await process_file(update, context)
    elif data == "back_to_main":
        kb = [
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="change_name")],
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ", callback_data="change_ext")],
            [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="keep_as_is")],
        ]
        await query.edit_message_text(
            f"üìÑ –§–∞–π–ª: <b>{context.user_data['original_filename']}</b>",
            reply_markup=InlineKeyboardMarkup(kb),
            parse_mode='HTML'
        )

    # –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å
    elif data == "set_all_public":
        for f in user_files.get(user_id, []):
            f['public'] = True
        await query.edit_message_text("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Ç–µ–ø–µ—Ä—å –ø—É–±–ª–∏—á–Ω—ã–µ")
    elif data == "set_all_private":
        for f in user_files.get(user_id, []):
            f['public'] = False
        await query.edit_message_text("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ")
    elif data == "manage_individual":
        files = user_files.get(user_id, [])
        msg = "üìã –í–∞—à–∏ —Ñ–∞–π–ª—ã:\n\n"
        kb = []
        for i, f in enumerate(files, 1):
            status = "üîì" if f['public'] else "üîí"
            msg += f"{i}. {status} {f['filename']}\n"
            kb.append([InlineKeyboardButton(
                f"{'–°–∫—Ä—ã—Ç—å' if f['public'] else '–ü–æ–∫–∞–∑–∞—Ç—å'} {f['filename']}",
                callback_data=f"toggle_{i - 1}")])
        kb.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_privacy")])
        await query.edit_message_text(msg, reply_markup=InlineKeyboardMarkup(kb))
    elif data.startswith("toggle_"):
        idx = int(data[7:])
        files = user_files.get(user_id, [])
        if 0 <= idx < len(files):
            files[idx]['public'] ^= True
            status = "–ø—É–±–ª–∏—á–Ω—ã–π" if files[idx]['public'] else "–ø—Ä–∏–≤–∞—Ç–Ω—ã–π"
            await query.edit_message_text(f"‚úÖ –§–∞–π–ª —Ç–µ–ø–µ—Ä—å {status}")
    elif data == "back_to_privacy":
        await toggle_privacy(query, context)

    # –ö–æ–º–∞–Ω–¥—ã –∏–∑ /start
    elif data == "cmd_subscribe":
        await subscription_info(query, context)
        await query.delete_message()
    elif data == "cmd_privacy":
        await toggle_privacy(query, context)
        await query.delete_message()
    elif data == "cmd_browse":
        await browse_files(query, context)
        await query.delete_message()
    elif data == "cmd_search":
        await search_files(query, context)
        await query.delete_message()

# ---------- RUN ----------
def main() -> None:
    app = ApplicationBuilder().token("8244258907:AAGSOfk1CMoBku1ChaL-lTEjWdFG7ll_EYo").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("subscribe", subscription_info))
    app.add_handler(CommandHandler("privacy", toggle_privacy))
    app.add_handler(CommandHandler("browse", browse_files))
    app.add_handler(CommandHandler("search", search_files))
    app.add_handler(CommandHandler("add_subscription", admin_add_subscription))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: (
        handle_filename(u, c) if c.user_data.get('state') == WAITING_FOR_NAME else
        handle_search(u, c)   if c.user_data.get('state') == WAITING_FOR_SEARCH else None
    )))
    app.add_handler(CallbackQueryHandler(button_callback))
    app.run_polling()

if __name__ == '__main__':
    main()
